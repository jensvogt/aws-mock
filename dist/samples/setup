#!/bin/bash

SERVERID="none"
ENDPOINT="http://localstack:4566"

#
# SQS Queues functions
#
function queue_exists() {
  awsmock sqs list-queues | grep $1 | wc -l
}

function create_redrive_policy() {
  echo '{"RedrivePolicy": "{\"deadLetterTargetArn\":\"arn:aws:sqs:eu-central-1:000000000000:'$1-dlqueue'\",\"maxReceiveCount\":\"3\"}", "MessageRetentionPeriod": "259200", "VisibilityTimeout": "90"}' > /tmp/$1-attributes.json
}

function create_attributes() {
    create_redrive_policy $1
    awsmock sqs set-queue-attributes --queue-url $ENDPOINT/000000000000/$1-queue --attributes file:///tmp/$1-attributes.json
}

function create_queue_with_dead_letter_queue() {
  if [ "$(queue_exists $1-queue)" -eq 0 ]; then
    awsmock sqs create-queue --queue-name=$1-queue > /dev/null 2>&1
    awsmock sqs create-queue --queue-name=$1-dlqueue > /dev/null 2>&1
    create_attributes $1
    echo "SQS queue $1 created"
  else
    echo "SQS queue $1 exists already"
  fi
}

#
# SNS function
#
function topic_exists() {
  awsmock sns list-topics | grep $1 | wc -l
}

function create_sns_subscription() {
  awsmock sns subscribe --topic-arn "arn:aws:sns:eu-central-1:000000000000:$1-topic" \
    --protocol sqs --notification-endpoint "arn:aws:sqs:eu-central-1:000000000000:$1-queue" > /dev/null
}

function create_sns_topic() {
  if [ "$(topic_exists $1)" -eq 0 ]; then
    awsmock sns create-topic --name $1 > /dev/null 2>&1
    echo "SNS topic $1 created"
  else
   echo "SNS topic $1 exists already"
 fi
}

#
# S3 functions
#
function bucket_exists() {
  awsmock s3 ls | grep $1 | wc -l
}

function create_s3_bucket() {
  if [ "$(bucket_exists $1)" -eq 0 ]; then
    awsmock s3 mb s3://$1 > /dev/null 2>&1
    echo "S3 bucket $1 created"
  else
    echo "S3 bucket $1 exists already"
  fi
}

function create_s3_object() {
  awsmock s3 cp "$1" "s3://$2/$3" > /dev/null 2>&1
  echo "Uploaded $1"
}

function create_bucket_notification() {

  bucket=$1
  hook=$2

  awsmock s3api put-bucket-notification-configuration --bucket $bucket --notification-configuration file://./s3/$hook > /dev/null 2>&1
  echo "Bucket notification created, hook: $hook"
}

#
# lambda function
#
function lambda_exists() {
  awsmock lambda list-functions | grep arn | grep $1 | wc -l
}

function create_lambda_function () {

  function=$1
  runtime=$2
  zipfile=$3
  handler=$4
  version=$5

  if [ "$(lambda_exists "$function")" -eq 0 ]; then
    awsmock lambda create-function \
    --function-name "$function" \
    --runtime "$runtime" \
    --timeout 120 \
    --memory-size 2024 \
    --environment "file://./lambda/$1-env.json" \
    --tags tag=latest,version=$version \
    --ephemeral-storage Size=10240 \
    --handler "$handler" \
    --region eu-central-1 \
    --zip-file "fileb://./testdata/lambda/$zipfile" \
    --role arn:aws:iam::000000000000:role/lambda-role \
    --cli-read-timeout 0
    echo "Lambda function $1 created"
  else
    echo "Lambda function $1 exists already"
  fi
}

#
# Transfer functions
#
function transfer_exists() {
  awsmock transfer list-servers | grep "Arn" | wc -l
}

function create_transfer_server {
  if [ "$(transfer_exists)" -eq 0 ]; then
    SERVERID=$(awsmock transfer create-server --protocols ftp | jq -r '.ServerId') > /dev/null 2>&1
    echo "Transfer server $SERVERID created"
  else
    SERVERID=$(awsmock transfer list-servers | jq -r '.Servers[].ServerId')
    echo "Transfer server $SERVERID exists already"
  fi
}

function create_transfer_user {
  role="arn:aws:iam::000000000000:role/$2"
  awsmock transfer create-user --server-id $1 --role $role --user-name $3 --home-directory $4 > /dev/null 2>&1
  echo "Transfer server user $3 created"
}

function start_transfer_server {
  awsmock transfer start-server --server-id $1
}

#
# Create S3 buckets
#
create_s3_bucket transfer-server
create_s3_bucket file-delivery
create_s3_bucket json-parsing-results
create_s3_bucket onix3-produktmeldungen
create_s3_bucket onix3-tmp-parsing-input
create_s3_bucket onix3-tmp-anreicherungs-input
create_s3_bucket katalogdaten-export-bucket
create_s3_bucket transformed-images
#create_s3_bucket inventory-reports
#create_s3_bucket vlb-preisreferenz-parsing-input
#create_s3_bucket vlb-preisreferenz-parsing-result

#
# Create SQS Queues
#
create_queue_with_dead_letter_queue file-logging
create_queue_with_dead_letter_queue protokollierung
create_queue_with_dead_letter_queue ftp-file-distribution-vlb-preisreferenz
create_queue_with_dead_letter_queue ftp-file-distribution-image
create_queue_with_dead_letter_queue ftp-file-distribution-onix
create_queue_with_dead_letter_queue ftp-file-distribution-inventory-feed
create_queue_with_dead_letter_queue image-input
create_queue_with_dead_letter_queue image-result
#create_queue_with_dead_letter_queue image-delete-notification
create_queue_with_dead_letter_queue parsing-result
create_queue_with_dead_letter_queue produktmeldung-parsing
create_queue_with_dead_letter_queue onix3-produktmeldungen-delete-events
create_queue_with_dead_letter_queue onix3-tmp-parsing-input-event
create_queue_with_dead_letter_queue onix3-tmp-anreicherungs-input-event
create_queue_with_dead_letter_queue onix3-datenlieferant-updates
create_queue_with_dead_letter_queue protokollierung-datenlieferant-updates
#create_queue_with_dead_letter_queue vlb-preisreferenz-splitting-result
create_queue_with_dead_letter_queue artikel-transformations-service-artikel-ausgang
create_queue_with_dead_letter_queue textannotation-result
create_queue_with_dead_letter_queue bilderlink
create_queue_with_dead_letter_queue katalogdaten
#create_queue_with_dead_letter_queue daten-lieferanten-service-daten-eingang
#create_queue_with_dead_letter_queue daten-datenlieferanten-notification
#create_queue_with_dead_letter_queue inventory-feed-parsing-result

#
# Create lambda function
#
create_lambda_function ftp-file-copy java17 file-copy-service-1.19.1-SNAPSHOT-aws.jar org.springframework.cloud.function.adapter.aws.FunctionInvoker 1.19.1
create_lambda_function ftp-file-distribution java17 file-distribution-service-1.26.1-SNAPSHOT-aws.jar org.springframework.cloud.function.adapter.aws.FunctionInvoker 1.26.1
#create_lambda_function image-transformation provided.al2 image-transformation-lambda.zip image-transformation-lambda 1.0
#create_lambda_function vlb-preisreferenz-splitting java17 vlb-preisreferenz-splitting-1.2.1-SNAPSHOT-aws.jar org.springframework.cloud.function.adapter.aws.FunctionInvoker

#
# Create SNS topic
#
create_sns_topic protokollierung-topic
create_sns_topic datenlieferant-updates

#
# SNS -> SQS subscription
#
create_sns_subscription protokollierung

#
# Create FTP server, creates also the transfer-server S3 bucket
#
create_transfer_server
create_transfer_user $SERVERID transfer_role ftpuser1 ftpuser1
create_transfer_user $SERVERID transfer_role ftpuser2 ftpuser2
create_transfer_user $SERVERID transfer_role ftpuser3 ftpuser3
create_transfer_user $SERVERID transfer_role ftpuser4 ftpuser4
start_transfer_server $SERVERID

#
# Setup S3 bucket notification events
#
create_bucket_notification transfer-server file-copy-hook.json
create_bucket_notification file-delivery file-delivery-hook.json
