#!/bin/bash

#
# SQS Queues functions
#
function queue_exists() {
  echo $(awsmock sqs list-queues | grep $1 | wc -l)
}

function create_redrive_policy() {
  echo '{"RedrivePolicy": "{\"deadLetterTargetArn\":\"arn:aws:sqs:eu-central-1:000000000000:'$1-dlqueue'\",\"maxReceiveCount\":\"3\"}", "MessageRetentionPeriod": "259200", "VisibilityTimeout": "90"}' > /tmp/$1-attributes.json
}

function create_attributes() {
    create_redrive_policy $1
    awsmock sqs set-queue-attributes --queue-url http://localhost:4567/000000000000/$1-queue --attributes file:///tmp/$1-attributes.json
}

function create_queue_with_dead_letter_queue() {
  if [ `queue_exists $1-queue` -eq 0 ]; then
    awsmock sqs create-queue --queue-name=$1-queue
    awsmock sqs create-queue --queue-name=$1-dlqueue
    create_attributes $1
  else
   echo "SQS queue $1 exists already"
  fi
}

#
# SNS function
#
function topic_exists() {
  echo $(awsmock sns list-topics | grep $1 | wc -l)
}

function create_sns_subscription() {
  awsmock sns subscribe --topic-arn arn:aws:sns:eu-central-1:000000000000:$1-topic \
    --protocol sqs --notification-endpoint arn:aws:sqs:eu-central-1:000000000000:$1-queue
}

function create_sns_topic() {
 if [ $(topic_exists $1) -eq 0 ]; then
   awsmock sns create-topic --name $1
  else
   echo "SNS topic $1 exists already"
 fi
}

#
# S3 functions
#
function bucket_exists() {
  echo $(awsmock s3 ls | grep $1 | wc -l)
}

function create_s3_bucket() {
  if [ $(bucket_exists $1) -eq 0 ]; then
    awsmock s3 mb s3://$1
  else
   echo "S3 bucket $1 exists already"
  fi
}

function create_s3_object() {
  awsmock s3 cp $1 s3://$2/$3
}

function create_bucket_notification() {

  bucket=$1
  hook=$2

  awsmock s3api put-bucket-notification-configuration --bucket $bucket --notification-configuration file://./s3/$hook
}

#
# Lambda function
#
function lambda_exists() {
  echo $(awsmock lambda list-functions | grep arn | grep $1 | wc -l)
}

function create_environment() {
  echo '{"Variables": {"JAVA_TOOL_OPTIONS": "-Duser.timezone=Europe/Berlin -Dspring.profiles.active=localhost"}}' > /tmp/$1-env.json
}

function create_lambda_function () {

  function=$1
  runtime=$2
  zipfile=$3

  if [ $(lambda_exists $1) -eq 0 ]; then
    create_environment $function
    awsmock lambda create-function \
    --function-name $function \
    --runtime $runtime \
    --timeout 120 \
    --memory-size 512 \
    --environment file:///tmp/$1-env.json \
    --handler org.springframework.cloud.function.adapter.aws.FunctionInvoker \
    --region eu-central-1 \
    --zip-file "fileb:///tmp/awsmock/data/lambda/$zipfile" \
    --role arn:aws:iam::000000000000:role/lambda-role
  else
   echo "Lambda function $1 exists already"
  fi
}

#
# Create S3 buckets
#
create_s3_bucket file-delivery
create_s3_bucket json-parsing-results
create_s3_bucket onix3-produktmeldungen
create_s3_bucket transfer-server
create_s3_bucket transformed-images
create_s3_bucket inventory-reports
create_s3_bucket onix3-tmp-parsing-input
create_s3_bucket onix3-tmp-anreicherungs-input
create_s3_bucket katalogdaten-export-bucket
create_s3_bucket vlb-preisreferenz-parsing-input
create_s3_bucket vlb-preisreferenz-parsing-result

#
# Create SQS Queues
#
create_queue_with_dead_letter_queue file-logging
create_queue_with_dead_letter_queue protokollierung
create_queue_with_dead_letter_queue ftp-file-distribution-vlb-preisreferenz
create_queue_with_dead_letter_queue ftp-file-distribution-image
create_queue_with_dead_letter_queue ftp-file-distribution-onix
create_queue_with_dead_letter_queue ftp-file-distribution-inventory-feed
create_queue_with_dead_letter_queue image-result
create_queue_with_dead_letter_queue vlb-preisreferenz-splitting-result
create_queue_with_dead_letter_queue parsing-result
create_queue_with_dead_letter_queue artikel-transformations-service-artikel-ausgang
create_queue_with_dead_letter_queue daten-lieferanten-service-daten-eingang
create_queue_with_dead_letter_queue daten-datenlieferanten-notification
create_queue_with_dead_letter_queue textannotation-result
create_queue_with_dead_letter_queue bilderlink
create_queue_with_dead_letter_queue basisdaten
create_queue_with_dead_letter_queue produktmeldung-parsing
create_queue_with_dead_letter_queue image-delete-notification
create_queue_with_dead_letter_queue onix3-datenlieferant-updates
create_queue_with_dead_letter_queue protokollierung-datenlieferant-updates
create_queue_with_dead_letter_queue katalogdaten
create_queue_with_dead_letter_queue onix3-tmp-parsing-input-event
create_queue_with_dead_letter_queue onix3-tmp-anreicherungs-input-event
create_queue_with_dead_letter_queue inventory-feed-parsing-result

#
# Create lambda function
#
create_lambda_function file-copy-service java17 file-copy-service-1.14.0-SNAPSHOT-aws.jar
create_lambda_function file-distribution-service java17 file-distribution-service-1.23.0-SNAPSHOT-aws.jar
create_lambda_function image-transformation-iservice provided.al2 image-transformation-lambda.zip

#
# Create SNS topic
#
create_sns_topic file-logging-topic

#
# Setup S3 bucket notification events
#
create_bucket_notification transfer-server file-copy-hook.json
create_bucket_notification file-delivery file-delivery-hook.json

#
# SNS -> SQS subscription
#
create_sns_subscription file-logging

#
# Put some objects
#
create_s3_object ./images/0036089631545_ANNO_OBILD.jpg file-delivery ftpuser1/0036089631545_ANNO_OBILD.jpg
create_s3_object ./images/9781406379990_ANNO_OBILD.jpg file-delivery ftpuser1/9781406379990_ANNO_OBILD.jpg
